<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

 
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false"/>

 <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="blPersistenceUnitManager" />
    </bean>
    
	<bean id="blEntityConfiguration" class="org.broadleafcommerce.common.persistence.EntityConfiguration"/>

	<bean id="blMergedEntityContexts" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>classpath:ets-domain-applicationContext-entity.xml</value>
            </list>
        </property>
    </bean>

	<bean id="extendHoldSeatStore" class="org.ets.ereg.scheduling.mock.MockExtendHoldSeatStoreImpl" />

	<context:component-scan base-package="org.ets.ereg.scheduling.dao"/>
	<context:component-scan base-package="org.ets.ereg.scheduling.service"/>
	<context:component-scan base-package="org.ets.ereg.scheduling.booking.service"/>
	<context:component-scan base-package="org.ets.ereg.scheduling.booking.dao"/>
	<context:component-scan base-package="org.ets.ereg.scheduling.testtakertest.dao"/>
	<context:component-scan base-package="org.ets.ereg.shared.dao"/>
	<context:component-scan base-package="org.ets.ereg.shared.service"/>
	<context:component-scan base-package="org.ets.ereg.common.business.dao"/>
	<context:component-scan base-package="org.ets.ereg.common.business.service"/>
	<context:component-scan base-package="org.ets.ereg.scheduling.spi.ssa.service"/>
	

	<bean id="blPersistenceUnitManager" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceXmlLocation" value="classpath*:/META-INF/ets-persistence-test.xml"/>
		<property name="dataSource" ref="blDS"/>
	</bean>

	<bean id="customerDao" class="org.broadleafcommerce.profile.core.dao.CustomerDaoImpl"/>
	<bean id="reTakeTestRulesService" class="org.ets.ereg.common.business.service.impl.ReTakeTestRulesServiceImpl"/>
	<bean id="rulesDao" class="org.ets.ereg.common.business.dao.impl.RulesDaoImpl"/>

    <bean id="blDS" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:broadleaf" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<bean id="generateUniqueCode" class="org.ets.ereg.common.business.util.GenerateUniqueCode"/>
	<bean id="applicationConfigurationService" class="org.ets.ereg.common.business.service.impl.ApplicationConfigurationServiceImpl"/>
	<bean id="applicationConfigurationDao" class="org.ets.ereg.common.business.dao.impl.ApplicationConfigurationDaoImpl"/>
	<bean id="referenceEntityService" class="org.ets.ereg.common.business.service.impl.ReferenceServiceImpl"/>
	<bean id="referenceEntityDao" class="org.ets.ereg.common.business.dao.impl.ReferenceEntityDaoImpl"/>
	
	
	<!--
	<bean id="org.broadleafcommerce.profile.core.domain.Customer" class="org.ets.ereg.domain.profile.ETSCustomerImpl" scope="prototype"/>
	<bean id="blCustomerDao" class="org.broadleafcommerce.profile.core.dao.CustomerDaoImpl"/>
	<bean id="etsCustomerLogonHistoryDao" class="org.ets.ereg.profile.dao.impl.CustomerLogonHistoryDaoImpl"/>
  	-->
  	
<!--   <bean id="org.ets.ereg.scheduling.spi.ssa.SSAHttpPostService" class="org.ets.ereg.scheduling.spi.ssa.service.HttpPostService" scope="prototype">
  <property name="authHost" value="ssa-stage.ets.org" /> 
  <property name="authPort" value="443" /> 
  <property name="loginUserId" value="intSysiSERStg" /> 
  <property name="loginPwd" value="1qaz@WSX" /> 
  <property name="connectionTimeout" value="5000" /> 
  <property name="acceptAllCerts" value="YES" /> 
  <property name="socketTimeout" value="60000" /> 

  </bean>
 	<bean id="org.ets.ereg.scheduling.spi.ssa.ISSASchedulingServiceSPI" class="org.ets.ereg.scheduling.spi.ssa.service.SSASchedulingService">
  <property name="httpPostService" ref="org.ets.ereg.scheduling.spi.ssa.SSAHttpPostService" /> 
  <property name="protocol" value="https" /> 
  <property name="serverPath" value="ssa-stage.ets.org/SSAWeb/intSchedulingXMLService.do" /> 
  <property name="source" value="ISR" /> 
  <property name="requestSystemId" value="ISER" />  -->
 <!--   One digit server id 
  --> 
  
  <bean id="schedulingService" class="org.ets.ereg.scheduling.service.impl.SchedulingServiceImpl">
		<property name="useMockSchedulingService" value="yes"/>
			<!-- value="${scheduling.useMockSchedulingService}" /> always use mock for unit test cases--> 	
	</bean>
	
  <bean id="org.ets.ereg.scheduling.spi.ssa.SSAHttpPostService"
		class="org.ets.ereg.scheduling.spi.ssa.service.HttpPostService" scope="prototype"/>	
	
	<bean id="ssaSchedulingService"
		class="org.ets.ereg.scheduling.spi.ssa.service.SSASchedulingService">
		<property name="httpPostService"
			ref="org.ets.ereg.scheduling.spi.ssa.SSAHttpPostService" />		
	</bean>
  
  	
</beans>
